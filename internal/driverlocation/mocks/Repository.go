// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/s3f4/locationmatcher/internal/driverlocation/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateIndex provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repository) CreateIndex(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropIfExists provides a mock function with given fields: _a0
func (_m *Repository) DropIfExists(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *Repository) Find(_a0 context.Context, _a1 *models.Query) ([]*models.DriverLocation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.DriverLocation
	if rf, ok := ret.Get(0).(func(context.Context, *models.Query) []*models.DriverLocation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DriverLocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find1 provides a mock function with given fields: _a0, _a1
func (_m *Repository) Find1(_a0 context.Context, _a1 *models.Query) ([]*models.DriverLocation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.DriverLocation
	if rf, ok := ret.Get(0).(func(context.Context, *models.Query) []*models.DriverLocation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DriverLocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields: _a0
func (_m *Repository) Migrate(_a0 context.Context) {
	_m.Called(_a0)
}

// UpsertBulk provides a mock function with given fields: _a0, _a1
func (_m *Repository) UpsertBulk(_a0 context.Context, _a1 []*models.DriverLocation) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.DriverLocation) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
